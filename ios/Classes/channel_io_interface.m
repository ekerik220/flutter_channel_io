// Autogenerated from Pigeon (v1.0.7), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "channel_io_interface.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary<NSString *, id> *wrapResult(id result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = @{
        @"code": (error.code ? error.code : [NSNull null]),
        @"message": (error.message ? error.message : [NSNull null]),
        @"details": (error.details ? error.details : [NSNull null]),
        };
  }
  return @{
      @"result": (result ? result : [NSNull null]),
      @"error": errorDict,
      };
}

@interface Profile ()
+ (Profile *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface BootConfig ()
+ (BootConfig *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end

@implementation Profile
+ (Profile *)fromMap:(NSDictionary *)dict {
  Profile *result = [[Profile alloc] init];
  result.name = dict[@"name"];
  if ((NSNull *)result.name == [NSNull null]) {
    result.name = nil;
  }
  result.avatarUrl = dict[@"avatarUrl"];
  if ((NSNull *)result.avatarUrl == [NSNull null]) {
    result.avatarUrl = nil;
  }
  result.email = dict[@"email"];
  if ((NSNull *)result.email == [NSNull null]) {
    result.email = nil;
  }
  result.mobileNumber = dict[@"mobileNumber"];
  if ((NSNull *)result.mobileNumber == [NSNull null]) {
    result.mobileNumber = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.name ? self.name : [NSNull null]), @"name", (self.avatarUrl ? self.avatarUrl : [NSNull null]), @"avatarUrl", (self.email ? self.email : [NSNull null]), @"email", (self.mobileNumber ? self.mobileNumber : [NSNull null]), @"mobileNumber", nil];
}
@end

@implementation BootConfig
+ (BootConfig *)fromMap:(NSDictionary *)dict {
  BootConfig *result = [[BootConfig alloc] init];
  result.pluginKey = dict[@"pluginKey"];
  if ((NSNull *)result.pluginKey == [NSNull null]) {
    result.pluginKey = nil;
  }
  result.memberId = dict[@"memberId"];
  if ((NSNull *)result.memberId == [NSNull null]) {
    result.memberId = nil;
  }
  result.memberHash = dict[@"memberHash"];
  if ((NSNull *)result.memberHash == [NSNull null]) {
    result.memberHash = nil;
  }
  result.profile = [Profile fromMap:dict[@"profile"]];
  if ((NSNull *)result.profile == [NSNull null]) {
    result.profile = nil;
  }
  result.unsubscribed = dict[@"unsubscribed"];
  if ((NSNull *)result.unsubscribed == [NSNull null]) {
    result.unsubscribed = nil;
  }
  result.trackDefaultEvent = dict[@"trackDefaultEvent"];
  if ((NSNull *)result.trackDefaultEvent == [NSNull null]) {
    result.trackDefaultEvent = nil;
  }
  result.hidePopup = dict[@"hidePopup"];
  if ((NSNull *)result.hidePopup == [NSNull null]) {
    result.hidePopup = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.pluginKey ? self.pluginKey : [NSNull null]), @"pluginKey", (self.memberId ? self.memberId : [NSNull null]), @"memberId", (self.memberHash ? self.memberHash : [NSNull null]), @"memberHash", (self.profile ? [self.profile toMap] : [NSNull null]), @"profile", (self.unsubscribed ? self.unsubscribed : [NSNull null]), @"unsubscribed", (self.trackDefaultEvent ? self.trackDefaultEvent : [NSNull null]), @"trackDefaultEvent", (self.hidePopup ? self.hidePopup : [NSNull null]), @"hidePopup", nil];
}
@end

@interface ChannelIOApiCodecReader : FlutterStandardReader
@end
@implementation ChannelIOApiCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [BootConfig fromMap:[self readValue]];
    
    case 129:     
      return [Profile fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface ChannelIOApiCodecWriter : FlutterStandardWriter
@end
@implementation ChannelIOApiCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[BootConfig class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[Profile class]]) {
    [self writeByte:129];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface ChannelIOApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation ChannelIOApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[ChannelIOApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[ChannelIOApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *ChannelIOApiGetCodec() {
  static dispatch_once_t s_pred = 0;
  static FlutterStandardMessageCodec *s_sharedObject = nil;
  dispatch_once(&s_pred, ^{
    ChannelIOApiCodecReaderWriter *readerWriter = [[ChannelIOApiCodecReaderWriter alloc] init];
    s_sharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return s_sharedObject;
}


void ChannelIOApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<ChannelIOApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ChannelIOApi.boot"
        binaryMessenger:binaryMessenger
        codec:ChannelIOApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(bootConfig:error:)], @"ChannelIOApi api (%@) doesn't respond to @selector(bootConfig:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        BootConfig *arg_config = args[0];
        FlutterError *error;
        NSString *output = [api bootConfig:arg_config error:&error];
        callback(wrapResult(output, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ChannelIOApi.test"
        binaryMessenger:binaryMessenger
        codec:ChannelIOApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(testWithError:)], @"ChannelIOApi api (%@) doesn't respond to @selector(testWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NSString *output = [api testWithError:&error];
        callback(wrapResult(output, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
